<?php

/**
 * @file
 * Code for the Hedley Event feature.
 */

include_once 'hedley_event.features.inc';

/**
 * Return events by group.
 *
 * @param object $group
 *   The group.
 * @param string $language_code
 *   The language code (e.g. "he", "ar").
 * @param bool $show_as_block
 *   (optional) Determine if content will be shown as a block, defaults to
 *   FALSE.
 * @param bool $promoted_only
 *   (optional) Determine if content should be promoted only, defaults to FALSE.
 * @param int $topic_tid
 *   (optional) The topic ID, defaults to 0.
 *
 * @return array
 *   Array with the events list.
 */
function hedley_event_get_events_by_group($group, $language_code, $show_as_block = FALSE, $promoted_only = FALSE, $topic_tid = 0) {
  global $user;

  // Determine the events setting depending on the block configuration.
  $range = $show_as_block ? 5 : 100;

  // Get contact nodes by group.
  $nodes = hedley_municipality_get_nodes_by_current_user_type('event', $range, $group, $promoted_only, $topic_tid);
  if (!$nodes) {
    // No contacts found.
    return NULL;
  }

  $events = [];
  foreach ($nodes as $node) {
    $wrapper = entity_metadata_wrapper('node', $node);
    $wrapper->language($language_code);

    // Ignore events without a title in the current language.
    if (!$wrapper->label()) {
      continue;
    }

    $image = $wrapper->field_image->value();
    $date = $wrapper->field_date->value();

    if (empty($date)) {
      // Date is required but just in case date is missing in some translation.
      continue;
    }

    $location_unfiltered = $wrapper->field_location->value();
    // Keep only "url" and "title" sub properties and remove any value that is
    // missing one of those properties, although they are required but just in
    // case.
    $location = array_filter(['url' => $location_unfiltered['url'], 'title' => $location_unfiltered['title']], function ($value) {
      return !is_null($value);
    });

    $event = [
      'id' => $wrapper->getIdentifier(),
      'name' => check_plain($wrapper->label()),
      'image_url' => !empty($image) ? image_style_url('square_large_image', $image['uri']) : hedley_municipality_get_default_image($wrapper->getBundle()),
      'description' => !empty($wrapper->body->value()) ? $wrapper->body->value->value() : NULL,
      'date' => hedley_event_timestamp_to_iso8601($date['value']),
      // Make sure the end date isn't the same as the start date.
      'end_date' => !empty($date) && $date['value2'] && $date['value'] != $date['value2'] ? hedley_event_timestamp_to_iso8601($date['value2']) : NULL,
      'recurring_weekly' => $wrapper->field_recurring_weekly->value(),
      'ticket_price' => $wrapper->field_ticket_price->value() ? $wrapper->field_ticket_price->value() : NULL,
      'location' => !empty($location) ? $location : NULL,
      'edit' => og_node_access($node, 'update', $user) == 'allow' ? TRUE : FALSE,
    ];

    // Remove empty values (elm expects the correct value or nothing), but keep
    // the values with `FALSE` value.
    $events[] = array_filter($event, function ($value) {
      return !is_null($value);
    });
  }

  return $events;
}

/**
 * Convert Unix timestamp to ISO8601.
 *
 * @param int $timestamp
 *   The Unix timestamp.
 *
 * @return false|string
 *   The converted timestamp.
 */
function hedley_event_timestamp_to_iso8601($timestamp) {
  return date('c', $timestamp);
}
