<?php

/**
 * @file
 * Code for the Hedley I18n feature.
 */

include_once 'hedley_i18n.features.inc';

/**
 * Implements hook_init().
 *
 * When language isn't explicitly set, redirect to the municipality's default
 * language.
 */
function hedley_i18n_init() {
  if (drupal_is_cli()) {
    return;
  }

  // Do nothing if the language is already explicitly set.
  $query_params = drupal_get_query_parameters();
  if (!empty($query_params['language'])) {
    return;
  }

  // Get default language for current municipality.
  if (!$node = hedley_municipality_get_current_group()) {
    return;
  }
  $wrapper = entity_metadata_wrapper('node', $node);
  // Redirect to the same page with the municipality's language.
  $query_params['language'] = $wrapper->field_default_language->value();
  drupal_goto(current_path(), array('query' => $query_params));
}

/**
 * Get the language switch links.
 *
 * @return array
 *   The language switch links.
 */
function hedley_i18n_language_switch_links() {
  global $language;
  $language_object = clone $language;

  if (!$node = hedley_municipality_get_current_group()) {
    // No need for the switcher if somehow we are not in a municipality.
    return [];
  }
  $path = drupal_is_front_page() ? '<front>' : $_GET['q'];

  return hedley_i18n_language_get_switch_links($language_object, $node, $path);
}

/**
 * Get a custom language switcher according to the node's translated languages.
 *
 * @param object $language_object
 *   A language object.
 * @param object $node
 *   A node object.
 * @param string $path
 *   The path for the switcher links.
 *   i.e. '<front>', 'node/[nodeID]'.
 *
 * @return array
 *   The language switch links or empty if the node has only one translated
 *   language.
 */
function hedley_i18n_language_get_switch_links($language_object, $node, $path) {
  // Extract node's translations.
  $translations = $node->translations->data;

  if (!is_array($translations) || count($translations) <= 1) {
    // No need for the language switcher if there's only one language.
    return [];
  }

  $links = language_negotiation_get_switch_links('language', $path);
  if (empty($links->links)) {
    return [];
  }
  $rendered_links = [];
  foreach ($links->links as $language_code => $link) {
    if (!in_array($language_code, array_keys($translations))) {
      // Don't add a language to the switcher if the municipality doesn't have a
      // translation in that language.
      continue;
    }
    // Using language in the query string, to avoid a conflict with og_purl when
    // it's the first element in the path.
    $options = [
      'query' => ['language' => $language_code],
    ];
    // Creating the link markup manually, because otherwise the "active" class
    // isn't added correctly according the global language.
    $active = $language_code == $language_object->language ? 'active' : '';
    $url = url($link['href'], $options);
    $rendered_links[$language_code] = "<a class=\"btn btn-default $active\" href=\"$url\">{$link['title']}</a>";
  }

  return $rendered_links;
}

/**
 * Implements hook_url_outbound_alter().
 *
 * Add the language as a query to all internal URLs.
 */
function hedley_i18n_url_outbound_alter(&$path, &$options, $original_path) {
  global $language;

  if ($options['external'] || drupal_is_cli()) {
    // Ignore external URLs, or when creating a link with cli.
    return;
  }

  if (strpos($path, 'autocomplete') || strpos($original_path, 'autocomplete') || strpos($path, 'ctools/context/ajax') === 0) {
    // Ignore when building AJAX URLs.
    return;
  }

  // Set the language, firstly from the language set in the current url and then
  // from the current language unless it's already explicitly set.
  $query_params = drupal_get_query_parameters();
  if (empty($options['query']['language'])) {
    $options['query']['language'] = isset($query_params['language']) ? $query_params['language'] : $language->language;
  }
}
