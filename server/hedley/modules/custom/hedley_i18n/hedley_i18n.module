<?php

/**
 * @file
 * Code for the Hedley I18n feature.
 */

include_once 'hedley_i18n.features.inc';

/**
 * Implementation of hook_init().
 */
function hedley_i18n_init() {
  // Set the site's language according to the municipality's language.
  $query_aprams = drupal_get_query_parameters();
  if (($municipality_language = hedley_i18n_municipality_language_negotiation()) && (!isset($query_aprams['language']) || $query_aprams['language'] != $municipality_language)) {
    $query_aprams['language'] = $municipality_language;
    drupal_goto(current_path(), array('query' => $query_aprams));
  }
}

/**
 * Get the language switch links.
 *
 * @return array
 *   The language switch links.
 */
function hedley_i18n_language_switch_links() {
  global $language;

  $path = drupal_is_front_page() ? '<front>' : $_GET['q'];
  $links = language_negotiation_get_switch_links('language', $path);
  if (empty($links->links)) {
    return [];
  }
  $rendered_links = [];
  foreach ($links->links as $language_code => $link) {
    // Using language in the query string, to avoid a conflict with og_purl when
    // it's the first element in the path.
    $options = [
      'query' => ['language' => $language_code],
    ];
    // Creating the link markup manually, because otherwise the "active" class
    // isn't added correctly according the global language.
    $active = $language_code == $language->language ? 'active' : '';
    $url = url($link['href'], $options);
    $rendered_links[] = "<a class=\"item $active\" href=\"$url\">{$link['title']}</a>";
  }
  return $rendered_links;
}

/**
 * Implements hook_url_outbound_alter().
 *
 * Add the language as a query to all internal URLs.
 */
function hedley_i18n_url_outbound_alter(&$path, &$options, $original_path) {
  global $language;

  if ($options['external'] || drupal_is_cli()) {
    // Ignore external URLs, or when creating a link with cli.
    return;
  }

  // Set the language, unless it's already explicitly set.
  if (empty($options['query']['language'])) {
    $options['query']['language'] = $language->language;
  }
}

/**
 * Language negotiation provider for default municipality language.
 *
 * @return bool|string
 *   The municipality's language code. FALSE when not in municipality context.
 */
function hedley_i18n_municipality_language_negotiation() {
  if (!$node = hedley_municipality_get_current()) {
    // No current municipality.
    return FALSE;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  return $wrapper->field_default_language->value();
}
