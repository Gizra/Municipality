<?php

/**
 * @file
 * Class HedleyI18nLanguageSwitcherLinks.
 */

/**
 * Class HedleyI18nLanguageSwitcherLinks.
 */
class HedleyI18nLanguageSwitcherLinks extends HedleyMunicipalityWebTestCase {

  /**
   * Get info.
   */
  public static function getInfo() {
    return array(
      'name' => 'Language switcher links',
      'description' => 'Test language switcher links returned according to the groups translated languages.',
      'group' => 'Hedley',
    );
  }

  /**
   * Test getting language switcher links.
   */
  public function testLanguageSwitchLinks() {
    // Create a dummy Arabic language object.
    $language_object = new stdClass();
    $language_object->language = 'ar';

    // Set language negotiation options (necessary for
    // `language_negotiation_get_switch_links` to work).
    variable_set('language_types', drupal_language_types() + ['language_custom' => TRUE]);
    variable_set('language_negotiation_' . LANGUAGE_TYPE_INTERFACE, locale_language_negotiation_info());
    variable_set('language_negotiation_' . LANGUAGE_TYPE_CONTENT, locale_language_negotiation_info());
    variable_set('language_negotiation_' . LANGUAGE_TYPE_URL, locale_language_negotiation_info());

    // List the expected languages.
    $expected_languages = ['ar', 'he'];

    // Create a municipality with a specific language (Arabic).
    $source = $this->createNode('municipality', $this->randomName(), $language_object->language);

    // Add translations to the node.
    $factory = EntityTranslationHandlerFactory::getInstance();
    $handler = $factory->getHandler('node', $source);
    
    // Add Hebrew translation.
    $translation = [
      'translate' => 0,
      'status' => 1,
      'language' => 'he',
      'source' => $source->language,
    ];
    $handler->setTranslation($translation, $source);

    $path_node = 'node/' . $source->nid;

    // Get the language switcher links (loading the node to get the
    // translations we sat above.)
    $rendered_links = hedley_i18n_language_get_switch_links($language_object, node_load($source->nid), $path_node);

    $this->assertEqual(array_keys($rendered_links), $expected_languages, 'Expected languages are displayed.');
  }

  /**
   * Create a node of the specified type in the specified language.
   *
   * @param string $type
   *   The node type.
   * @param string $title
   *   Title of node in specified language.
   * @param string $langcode
   *   Language code.
   *
   * @return object
   *   The created node object.
   */
  protected function createNode($type, $title, $langcode) {
    $node = new stdClass();
    $node->type = $type;
    node_object_prepare($node);
    $node->title = $title;
    $node->language = $langcode;
    node_save($node);

    // Check to make sure the node was created.
    $node = $this->drupalGetNodeByTitle($title);
    $this->assertTrue($node, 'Node found in database.');

    return $node;
  }

}
