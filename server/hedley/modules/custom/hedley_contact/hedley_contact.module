<?php

/**
 * @file
 * Code for the Hedley contact feature.
 */

include_once 'hedley_contact.features.inc';

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Remove the title from the contact node form.
 */
function hedley_contact_form_contact_node_form_alter(&$form, &$form_state) {
  $form['title']['#access'] = FALSE;
}

/**
 * Implements hook_node_presave().
 *
 * Set contact node title according to the municipality's default language.
 */
function hedley_contact_node_presave($node) {
  global $language;
  if ($node->type != 'contact') {
    return;
  }

  $municipality_wrapper = entity_metadata_wrapper('node', hedley_municipality_node_municipality($node));
  // Set the node's title based on the user's language, or the next available
  // language.
  if (($municipality_wrapper->field_default_language->value() && !empty($node->field_last_name)) && $language_code = hedley_municipality_get_non_empty_language_for_field($node->field_last_name, $language->language)) {
    $node->title = trim($node->field_first_name[$language_code][0]['value'] . ' ' . $node->field_last_name[$language_code][0]['value']);
  }
}

/**
 * Format the contact reception hours array, grouped by hours and days.
 *
 * @param object $node
 *   A contact node.
 *
 * @return array
 *   The formatted hours, keyed by days labels.
 */
function hedley_contact_get_reception_hours($node) {
  if (empty($node->field_reception_hours[LANGUAGE_NONE])) {
    return [];
  }

  // Fetch values from reception hours multifield. Accessing the node directly
  // because the wrapper doesn't seem to work consistently with multifields.
  $reception_hours = [];
  foreach ($node->field_reception_hours[LANGUAGE_NONE] as $reception_hour) {
    if (!isset($reception_hour['field_hours'][LANGUAGE_NONE][0]['value']) || !isset($reception_hour['field_weekday'][LANGUAGE_NONE][0]['value'])) {
      continue;
    }

    // The weekday as int from Sunday = 0 to Saturday = 6.
    $day_index = intval($reception_hour['field_weekday'][LANGUAGE_NONE][0]['value']);
    $hours = check_plain($reception_hour['field_hours'][LANGUAGE_NONE][0]['value']);
    // Group the reception hours by day, as a unified string.
    if (!isset($reception_hours[$day_index])) {
      $reception_hours[$day_index] = $hours;
    }
    else {
      $reception_hours[$day_index] .= ', ' . $hours;
    }
  }
  // Sort by day.
  ksort($reception_hours);

  // Group days with identical hours together.
  $reception_hours_grouped = [];
  foreach ($reception_hours as $day_index => $hours) {
    if (!isset($reception_hours_grouped[$hours])) {
      $reception_hours_grouped[$hours] = $day_index;
    }
    else {
      $reception_hours_grouped[$hours] .= '|' . $day_index;
    }
  }

  // Format the hours.
  $formatted_hours = [];
  foreach ($reception_hours_grouped as $hours => $days) {
    // Determine the default delimiter which the app will use to show the days.
    $multiple_days = FALSE;
    $days = explode('|', $days);
    foreach ($days as $delta => $day_index) {
      // In case we have more than two consecutive days in which the hours are
      // the same (same hours group) then change the delimiter to a dash which
      // the app uses to hide all the middle days and show only the fist and
      // last days.
      if (isset($days[$delta - 1]) && $days[$delta - 1] == $day_index - 1 && isset($days[$delta + 1]) && $days[$delta + 1] == $day_index + 1) {
        $multiple_days = TRUE;
      }
    }
    $formatted_hours[] = [
      'days' => $days,
      'hours' => $hours,
      'multiple_days' => $multiple_days,
    ];
  }

  return $formatted_hours;
}

/**
 * Return contacts by group.
 *
 * @param object $group
 *   The group.
 * @param string $language_code
 *   The language code (e.g. "he", "ar").
 * @param bool $show_as_block
 *   (optional) Determine if content will be shown as a block, defaults to
 *   FALSE.
 * @param bool $promoted_only
 *   (optional) Determine if content should be promoted only, defaults to FALSE.
 * @param int $topic_tid
 *   (optional) The topic id, defaults to 0.
 *
 * @return array
 *   Array with the contacts list.
 */
function hedley_contact_get_contacts_by_group($group, $language_code, $show_as_block = FALSE, $promoted_only = FALSE, $topic_tid = 0) {
  global $user;

  // Determine the events setting depending on the block configuration.
  $range = $show_as_block ? 5 : 100;

  // Get contact nodes by group.
  $nodes = hedley_municipality_get_nodes_by_current_user_type('contact', $range, $group, $promoted_only, $topic_tid, 'ASC');
  if (!$nodes) {
    // No contacts found.
    return NULL;
  }
  $contacts = [];
  foreach ($nodes as $node) {
    $wrapper = entity_metadata_wrapper('node', $node);
    $wrapper->language($language_code);

    // Ignore contacts without a name and a department in the current language.
    if (!$wrapper->field_last_name->value() && !$wrapper->field_department->value()) {
      continue;
    }

    $image = $wrapper->field_image->value();

    $name = check_plain($wrapper->field_first_name->value()) . ' ' . check_plain($wrapper->field_last_name->value());
    $department = '';
    if (!trim($name) && $wrapper->field_department->value()) {
      // If we have only the field department filled it means the contact card
      // is a general department card, not a specific person.
      $name = $wrapper->field_department->label();
    }
    else {
      // This is a person and we need to display the department separately.
      $department = $wrapper->field_department->label();
    }

    // Get the topics related to the user, if not empty.
    $topics_array = array();
    $topics = $wrapper->{OG_VOCAB_FIELD}->value();
    if (!empty($wrapper->{OG_VOCAB_FIELD}->raw())) {
      foreach ($topics as $topic) {
        $topic_wrapper = entity_metadata_wrapper('taxonomy_term', $topic);
        $topic_wrapper->language($language_code);
        // Ignore any term that isn't translated to the current language. In
        // such case, the term's label would be empty.
        if (!$topic_wrapper->label()) {
          continue;
        }

        $topics_array[] = [
          'id' => $topic_wrapper->getIdentifier(),
          'name' => $topic_wrapper->label(),
          // If the term doesn't have any color then default to white because
          // elm expects a color here.
          'color' => $topic_wrapper->field_color->value() ? $topic_wrapper->field_color->value() : 'white',
        ];
      }
    }

    $contact = [
      'id' => $wrapper->getIdentifier(),
      'name' => $name,
      'department' => check_plain($department),
      'image_url' => $image ? image_style_url('square_large_image', $image['uri']) : hedley_municipality_get_default_image($wrapper->getBundle()),
      'phone' => check_plain($wrapper->field_phone->value()),
      'fax' => check_plain($wrapper->field_fax->value()),
      'email' => check_plain($wrapper->field_email->value()),
      'address' => check_plain($wrapper->field_address->value()),
      'job_title' => check_plain($wrapper->field_job_title->value()),
      'topics' => $topics_array,
      'reception_hours' => hedley_contact_get_reception_hours($node),
      'edit' => og_node_access($node, 'update', $user) == 'allow' ? TRUE : FALSE,
    ];

    // Remove empty values (elm expects the correct value or nothing), unless
    // we have a bool FALSE value, we want to keep that.
    $contacts[] = array_filter($contact, function ($value) {
      return !is_null($value);
    });
  }

  return $contacts;

}
