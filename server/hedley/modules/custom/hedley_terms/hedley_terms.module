<?php

/**
 * @file
 * Code for the Hedley Terms feature.
 */

include_once 'hedley_terms.features.inc';

/**
 * @file
 * Hedley Terms module.
 */

/**
 * Get links for changing the user type.
 *
 * @return string
 *   Rendered user type links.
 */
function hedley_terms_get_user_type_links() {
  $links = [];

  // Get the target path for when changing the user type.
  $path = _hedley_terms_user_type_links_path();

  // Get current municipality to check which user types it has, no need to
  // display the switcher if we don't have a group.
  if (!$municipality = hedley_municipality_get_current_group()) {
    return FALSE;
  }

  // Get the wrapper of the group in order to get the user type value.
  $municipality_wrapper = entity_metadata_wrapper('node', $municipality);

  $vocabulary = taxonomy_vocabulary_machine_name_load('user_types');
  foreach (taxonomy_get_tree($vocabulary->vid) as $term) {
    if (!in_array($term->tid, $municipality_wrapper->field_user_types->raw())) {
      continue;
    }
    $wrapper = entity_metadata_wrapper('taxonomy_term', $term->tid);
    $user_name = drupal_html_class($term->name);
    $links[] = [
      'label' => $wrapper->label(),
      'url' => url($path, ['query' => ['user_type' => $user_name]]),
      'active' => $user_name == hedley_terms_get_current_user_type(),
    ];
  }

  // No need to display the "user type" switcher in case there's only one link
  // or none.
  if (count($links) <= 1) {
    return FALSE;
  }

  $variables = [
    'links' => $links,
  ];
  return theme('hedley_terms_user_type_links', $variables);
}

/**
 * Get the target path for the user type select links.
 *
 * @return string
 *   The target path.
 */
function _hedley_terms_user_type_links_path() {
  // When re-setting user type, redirect either to the current municipality's
  // homepage or the global homepage, unless it make sense to stay on the
  // current page and only change the user.
  $menu_item = menu_get_item();
  switch ($menu_item['path']) {
    case 'taxonomy/term/%':
      return current_path();

    default:
      $node = hedley_municipality_get_current_group();
      return $node ? 'node/' . $node->nid : '<front>';
  }
}

/**
 * Get the current user type's term ID.
 *
 * @return int
 *   The user type term ID.
 */
function hedley_terms_get_current_user_type_tid() {
  $current_user_name = hedley_terms_get_current_user_type();
  // Find the user type term with the same name as the current name.
  $vocabulary = taxonomy_vocabulary_machine_name_load('user_types');
  foreach (taxonomy_get_tree($vocabulary->vid) as $term) {
    if (drupal_html_class($term->name) == $current_user_name) {
      return $term->tid;
    }
  }
  // Not found.
  return 0;
}

/**
 * Get the current user type.
 *
 * @return string
 *   The user type name.
 */
function hedley_terms_get_current_user_type() {
  return !empty($_GET['user_type']) ? drupal_html_class($_GET['user_type']) : 'residents';
}

/**
 * Implements hook_theme().
 */
function hedley_terms_theme($existing, $type, $theme, $path) {
  return [
    'hedley_terms_user_type_links' => array(
      'variables' => [
        'links' => NULL,
        'count_class' => NULL,
      ],
      'template' => 'user-type-links',
      'path' => drupal_get_path('module', 'hedley_terms') . '/templates',
    ),
  ];
}

/**
 * Implements hook_url_outbound_alter().
 */
function hedley_terms_url_outbound_alter(&$path, &$options, $original_path) {
  if ($options['external']) {
    // Ignore external URLs.
    return;
  }
  // When a specific user was set on the query, but the url doesn't define a
  // a user, then add the user to the url.
  if (!empty($_GET['user_type']) && empty($options['query']['user_type'])) {
    $options['query']['user_type'] = check_plain($_GET['user_type']);
  }
}
